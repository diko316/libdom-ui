{"version":3,"file":"libdom-ui.min.js","sources":["../src/lib/packager.js"],"sourcesContent":["'use strict';\n\nimport {\n            string,\n            array\n        } from \"libcore\";\n\nconst INVALID_NAME = \"Invalid Package [name] parameter.\",  \n    INVALID_NAMES = \"Invalid [names] Package collection parameter.\";\n\n\nclass Package {\n    constructor(name) {\n        this.id = ':' + name;\n        this.name = name;\n        \n        this.registered = false;\n        this.requires = [];\n\n    }\n}\n\n\nexport default\n    class Packager {\n        constructor() {\n            this.names = [];\n            this.packages = {};\n        }\n\n        register(name, dependencies) {\n\n            var isString = string,\n                names = this.names,\n                list = this.packages,\n                PackageClass = Package;\n            var c, l, dependency, items, il, id, packageObject;\n            \n            if (!isString(name)) {\n                throw new Error(INVALID_NAME);\n            }\n\n            id = ':' + name;\n\n            if (id in list && list[id].registered) {\n                throw new Error(`Package ${name} already exists.`);\n            }\n\n            names[names.length] = name;\n\n            packageObject = new PackageClass(name);\n            \n            list[id] = packageObject;\n            packageObject.registered = true;\n            \n\n            if (isString(dependencies)) {\n                dependencies = [dependencies];\n            }\n\n            if (array(dependencies)) {\n                items = packageObject.requires;\n                il = 0;\n\n                for (c = -1, l = dependencies.length; l--;) {\n                    dependency = dependencies[++c];\n                    if (isString(dependency)) {\n                        items[il++] = dependency;\n                    }\n\n                }\n\n            }\n\n            return this;\n\n        }\n\n        flatten(names) {\n            var list = this.packages,\n                isString = string;\n            var position, len, name, id, inserted, stack, total,\n                pack, requires, resolved, rl, recursed;\n            var maxcall = 50;\n\n            var rid = 0;\n\n            if (isString(names)) {\n                names = [names];\n            }\n\n            if (array(names)) {\n                total = names.length;\n\n                // validate names\n                for (len = total; len--;) {\n                    name = names[len];\n\n                    if (!isString(name)) {\n                        throw new Error(INVALID_NAMES);\n                    }\n\n                    id = ':' + name;\n                    if (!(id in list)) {\n                        throw new Error(`Package ${name} do not exist.`);\n                    }\n                    else if (!list[id].registered) {\n                        throw new Error(`Package ${name} is not registered.`);\n                    }\n\n                }\n                \n                recursed = {};\n                inserted = {};\n                stack = null;\n                position = -1;\n                len = total;\n                resolved = [];\n                rl = 0;\n\n\n                for (; len--;) {\n                    if (!--maxcall) {\n                        break;\n                    }\n                    name = names[++position];\n                    id = ':' + name;\n                    pack = list[id];\n\n                    requires = pack.requires;\n                    total = requires.length;\n                    \n                    if (!(id in recursed)) {\n                        if (total) {\n                            recursed[id] = true;\n                            stack = {\n                                rid: ++rid,\n                                parent: stack,\n                                ender: name,\n                                c: position,\n                                l: len,\n                                items: names,\n                                rs: resolved\n                            };\n    \n                            names = requires;\n                            len = total;\n                            position = -1;\n                            resolved = [];\n                            rl = 0;\n                            \n                            continue;\n                        }\n                        // add leaf\n                        else if (!(id in inserted)) {\n                            resolved[rl++] =\n                                inserted[id] = name;\n                        }\n                    }\n\n                    // end?\n                    if (!len) {\n                        // pop\n                        for (; stack; ) {\n                            // pop!\n                            len = stack.l;\n                            name = stack.ender;\n                            position = stack.c;\n                            names = stack.rs;\n                            names.push.apply(names, resolved);\n                            resolved = names;\n                            names = stack.items;\n                            rl = resolved.length;\n\n                            stack = stack.parent;\n                            \n\n                            // included ender\n                            id = ':' + name;\n                            if (!(id in inserted)) {\n                                resolved[rl++] = \n                                    inserted[id] = name;\n                            }\n\n                            if (len) {\n                                break;\n                            }\n\n                        }\n\n                    }\n\n                }\n\n            }\n\n            return resolved;\n\n        }\n    }"],"names":["const","Package","name","this","id","registered","requires","Packager","names","packages","register","dependencies","c","l","dependency","items","il","packageObject","isString","string","list","PackageClass","Error","length","array","flatten","position","len","inserted","stack","total","pack","resolved","rl","recursed","maxcall","rid","parent","ender","rs","push","apply"],"mappings":"wOAOAA,IAIMC,EAAQ,SACEC,GACZC,KAASC,GAAK,IAAMF,EACpBC,KAASD,KAAOA,EAEhBC,KAASE,YAAa,EACtBF,KAASG,aAOHC,EAAS,WAEXJ,KAASK,SACTL,KAASM,aAGbF,YAAIG,kBAASR,EAAMS,GAEf,IAIQC,EAAGC,EAAGC,EAAYC,EAAOC,EAAIZ,EAAIa,EAJjCC,EAAWC,SACfX,EAAYL,KAAKK,MACjBY,EAAWjB,KAAKM,SAChBY,EAAmBpB,EAGvB,IAASiB,EAAShB,GACd,MAAU,IAAIoB,MAhCL,qCAqCb,IAFAlB,EAAS,IAAMF,KAEDkB,GAAQA,EAAKhB,GAAIC,WAC3B,MAAU,IAAIiB,MAAM,WAAWpB,sBAenC,GAZAM,EAAUA,EAAMe,QAAUrB,EAE1Be,EAAoB,IAAII,EAAanB,GAErCkB,EAAShB,GAAMa,EACfA,EAAkBZ,YAAa,EAGvBa,EAASP,KACbA,GAAoBA,IAGhBa,QAAMb,GAIV,IAHAI,EAAYE,EAAcX,SAC1BU,EAAS,EAEAJ,GAAK,EAAGC,EAAIF,EAAaY,OAAQV,KAE9BK,EADRJ,EAAiBH,IAAeC,MAE5BG,EAAUC,KAAQF,GAO9B,OAAWX,MAIfI,YAAIkB,iBAAQjB,GACR,IAEQkB,EAAUC,EAAKzB,EAAME,EAAIwB,EAAUC,EAAOC,EAC9CC,EAAUzB,EAAU0B,EAAUC,EAAIC,EAH9Bd,EAAOjB,KAAKM,SAChBS,EAAeC,SAGXgB,EAAU,GAEVC,EAAM,EAMd,GAJQlB,EAASV,KACbA,GAAaA,IAGTgB,QAAMhB,GAAQ,CAIlB,IAASmB,EAHTG,EAAYtB,EAAMe,OAGII,KAAQ,CAG1B,GAFAzB,EAAWM,EAAMmB,IAERT,EAAShB,GACd,MAAU,IAAIoB,MA3Fd,iDA+FJ,MADAlB,EAAS,IAAMF,KACCkB,GACZ,MAAU,IAAIE,MAAM,WAAWpB,oBAE1B,IAAKkB,EAAKhB,GAAIC,WACnB,MAAU,IAAIiB,MAAM,WAAWpB,yBAcvC,IATAgC,KACAN,KACAC,EAAY,KACZH,GAAgB,EAChBC,EAAUG,EACVE,KACAC,EAAS,EAGEN,OACIQ,GADI,CAWf,GAPAjC,EAAWM,IAAQkB,GACnBtB,EAAS,IAAMF,EACf6B,EAAWX,EAAKhB,GAEhBE,EAAeyB,EAAKzB,SACpBwB,EAAYxB,EAASiB,SAEXnB,KAAM8B,GAAW,CACvB,GAAQJ,EAAO,CACXI,EAAa9B,IAAM,EACnByB,GACIO,MAAWA,EACXC,OAAYR,EACZS,MAAWpC,EACXU,EAAOc,EACPb,EAAOc,EACPZ,MAAWP,EACX+B,GAAQP,GAGZxB,EAAYF,EACZqB,EAAUG,EACVJ,GAAgB,EAChBM,KACAC,EAAS,EAET,SAGW7B,KAAMwB,IACjBI,EAAaC,KACTL,EAAaxB,GAAMF,GAK/B,IAASyB,EAEL,KAAWE,IAEPF,EAAUE,EAAMhB,EAChBX,EAAW2B,EAAMS,MACjBZ,EAAeG,EAAMjB,GACrBJ,EAAYqB,EAAMU,IACRC,KAAKC,MAAMjC,EAAOwB,GAC5BA,EAAexB,EACfA,EAAYqB,EAAMd,MAClBkB,EAASD,EAAST,OAElBM,EAAYA,EAAMQ,QAIlBjC,EAAS,IAAMF,KACC0B,IACZI,EAAaC,KACTL,EAAaxB,GAAMF,IAGnByB,OAYxB,OAAWK"}